/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SHAPELY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof SHAPELY_PROGRAM_ADDRESS,
  TAccountMarketMaker extends string | AccountMeta<string> = string,
  TAccountAvatarCollection extends string | AccountMeta<string> = string,
  TAccountAccessoryCollection extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMarketMaker extends string
        ? WritableSignerAccount<TAccountMarketMaker> &
            AccountSignerMeta<TAccountMarketMaker>
        : TAccountMarketMaker,
      TAccountAvatarCollection extends string
        ? WritableSignerAccount<TAccountAvatarCollection> &
            AccountSignerMeta<TAccountAvatarCollection>
        : TAccountAvatarCollection,
      TAccountAccessoryCollection extends string
        ? WritableSignerAccount<TAccountAccessoryCollection> &
            AccountSignerMeta<TAccountAccessoryCollection>
        : TAccountAccessoryCollection,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountTreasury extends string
        ? ReadonlyAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  fee: number;
};

export type InitializeInstructionDataArgs = {
  seed: number | bigint;
  fee: number;
};

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['fee', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['fee', getU16Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountMarketMaker extends string = string,
  TAccountAvatarCollection extends string = string,
  TAccountAccessoryCollection extends string = string,
  TAccountConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  marketMaker: TransactionSigner<TAccountMarketMaker>;
  avatarCollection: TransactionSigner<TAccountAvatarCollection>;
  accessoryCollection: TransactionSigner<TAccountAccessoryCollection>;
  config?: Address<TAccountConfig>;
  treasury?: Address<TAccountTreasury>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: InitializeInstructionDataArgs['seed'];
  fee: InitializeInstructionDataArgs['fee'];
};

export async function getInitializeInstructionAsync<
  TAccountMarketMaker extends string,
  TAccountAvatarCollection extends string,
  TAccountAccessoryCollection extends string,
  TAccountConfig extends string,
  TAccountTreasury extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SHAPELY_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountMarketMaker,
    TAccountAvatarCollection,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountTreasury,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountMarketMaker,
    TAccountAvatarCollection,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountTreasury,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SHAPELY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    marketMaker: { value: input.marketMaker ?? null, isWritable: true },
    avatarCollection: {
      value: input.avatarCollection ?? null,
      isWritable: true,
    },
    accessoryCollection: {
      value: input.accessoryCollection ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
        getU64Encoder().encode(expectSome(args.seed)),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
      ],
    });
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.marketMaker),
      getAccountMeta(accounts.avatarCollection),
      getAccountMeta(accounts.accessoryCollection),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountMarketMaker,
    TAccountAvatarCollection,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountTreasury,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeInput<
  TAccountMarketMaker extends string = string,
  TAccountAvatarCollection extends string = string,
  TAccountAccessoryCollection extends string = string,
  TAccountConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  marketMaker: TransactionSigner<TAccountMarketMaker>;
  avatarCollection: TransactionSigner<TAccountAvatarCollection>;
  accessoryCollection: TransactionSigner<TAccountAccessoryCollection>;
  config: Address<TAccountConfig>;
  treasury: Address<TAccountTreasury>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: InitializeInstructionDataArgs['seed'];
  fee: InitializeInstructionDataArgs['fee'];
};

export function getInitializeInstruction<
  TAccountMarketMaker extends string,
  TAccountAvatarCollection extends string,
  TAccountAccessoryCollection extends string,
  TAccountConfig extends string,
  TAccountTreasury extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SHAPELY_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountMarketMaker,
    TAccountAvatarCollection,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountTreasury,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountMarketMaker,
  TAccountAvatarCollection,
  TAccountAccessoryCollection,
  TAccountConfig,
  TAccountTreasury,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SHAPELY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    marketMaker: { value: input.marketMaker ?? null, isWritable: true },
    avatarCollection: {
      value: input.avatarCollection ?? null,
      isWritable: true,
    },
    accessoryCollection: {
      value: input.accessoryCollection ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.marketMaker),
      getAccountMeta(accounts.avatarCollection),
      getAccountMeta(accounts.accessoryCollection),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountMarketMaker,
    TAccountAvatarCollection,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountTreasury,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof SHAPELY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    marketMaker: TAccountMetas[0];
    avatarCollection: TAccountMetas[1];
    accessoryCollection: TAccountMetas[2];
    config: TAccountMetas[3];
    treasury: TAccountMetas[4];
    mplCoreProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      marketMaker: getNextAccount(),
      avatarCollection: getNextAccount(),
      accessoryCollection: getNextAccount(),
      config: getNextAccount(),
      treasury: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
