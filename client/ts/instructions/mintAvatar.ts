/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SHAPELY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_AVATAR_DISCRIMINATOR = new Uint8Array([
  19, 60, 175, 155, 163, 211, 181, 93,
]);

export function getMintAvatarDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_AVATAR_DISCRIMINATOR);
}

export type MintAvatarInstruction<
  TProgram extends string = typeof SHAPELY_PROGRAM_ADDRESS,
  TAccountCollector extends string | AccountMeta<string> = string,
  TAccountAvatar extends string | AccountMeta<string> = string,
  TAccountAvatarCollection extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCollector extends string
        ? WritableSignerAccount<TAccountCollector> &
            AccountSignerMeta<TAccountCollector>
        : TAccountCollector,
      TAccountAvatar extends string
        ? WritableSignerAccount<TAccountAvatar> &
            AccountSignerMeta<TAccountAvatar>
        : TAccountAvatar,
      TAccountAvatarCollection extends string
        ? WritableAccount<TAccountAvatarCollection>
        : TAccountAvatarCollection,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintAvatarInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  uri: string;
};

export type MintAvatarInstructionDataArgs = { name: string; uri: string };

export function getMintAvatarInstructionDataEncoder(): Encoder<MintAvatarInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MINT_AVATAR_DISCRIMINATOR })
  );
}

export function getMintAvatarInstructionDataDecoder(): Decoder<MintAvatarInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getMintAvatarInstructionDataCodec(): Codec<
  MintAvatarInstructionDataArgs,
  MintAvatarInstructionData
> {
  return combineCodec(
    getMintAvatarInstructionDataEncoder(),
    getMintAvatarInstructionDataDecoder()
  );
}

export type MintAvatarInput<
  TAccountCollector extends string = string,
  TAccountAvatar extends string = string,
  TAccountAvatarCollection extends string = string,
  TAccountConfig extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  collector: TransactionSigner<TAccountCollector>;
  avatar: TransactionSigner<TAccountAvatar>;
  avatarCollection: Address<TAccountAvatarCollection>;
  config: Address<TAccountConfig>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: MintAvatarInstructionDataArgs['name'];
  uri: MintAvatarInstructionDataArgs['uri'];
};

export function getMintAvatarInstruction<
  TAccountCollector extends string,
  TAccountAvatar extends string,
  TAccountAvatarCollection extends string,
  TAccountConfig extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SHAPELY_PROGRAM_ADDRESS,
>(
  input: MintAvatarInput<
    TAccountCollector,
    TAccountAvatar,
    TAccountAvatarCollection,
    TAccountConfig,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintAvatarInstruction<
  TProgramAddress,
  TAccountCollector,
  TAccountAvatar,
  TAccountAvatarCollection,
  TAccountConfig,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SHAPELY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collector: { value: input.collector ?? null, isWritable: true },
    avatar: { value: input.avatar ?? null, isWritable: true },
    avatarCollection: {
      value: input.avatarCollection ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.collector),
      getAccountMeta(accounts.avatar),
      getAccountMeta(accounts.avatarCollection),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintAvatarInstructionDataEncoder().encode(
      args as MintAvatarInstructionDataArgs
    ),
  } as MintAvatarInstruction<
    TProgramAddress,
    TAccountCollector,
    TAccountAvatar,
    TAccountAvatarCollection,
    TAccountConfig,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintAvatarInstruction<
  TProgram extends string = typeof SHAPELY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    collector: TAccountMetas[0];
    avatar: TAccountMetas[1];
    avatarCollection: TAccountMetas[2];
    config: TAccountMetas[3];
    mplCoreProgram: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: MintAvatarInstructionData;
};

export function parseMintAvatarInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintAvatarInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collector: getNextAccount(),
      avatar: getNextAccount(),
      avatarCollection: getNextAccount(),
      config: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintAvatarInstructionDataDecoder().decode(instruction.data),
  };
}
