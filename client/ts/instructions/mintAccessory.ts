/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SHAPELY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_ACCESSORY_DISCRIMINATOR = new Uint8Array([
  150, 125, 100, 91, 199, 165, 77, 225,
]);

export function getMintAccessoryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_ACCESSORY_DISCRIMINATOR
  );
}

export type MintAccessoryInstruction<
  TProgram extends string = typeof SHAPELY_PROGRAM_ADDRESS,
  TAccountArtist extends string | AccountMeta<string> = string,
  TAccountAccessory extends string | AccountMeta<string> = string,
  TAccountAccessoryCollection extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountArtist extends string
        ? WritableSignerAccount<TAccountArtist> &
            AccountSignerMeta<TAccountArtist>
        : TAccountArtist,
      TAccountAccessory extends string
        ? WritableSignerAccount<TAccountAccessory> &
            AccountSignerMeta<TAccountAccessory>
        : TAccountAccessory,
      TAccountAccessoryCollection extends string
        ? WritableAccount<TAccountAccessoryCollection>
        : TAccountAccessoryCollection,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintAccessoryInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  uri: string;
};

export type MintAccessoryInstructionDataArgs = { name: string; uri: string };

export function getMintAccessoryInstructionDataEncoder(): Encoder<MintAccessoryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MINT_ACCESSORY_DISCRIMINATOR })
  );
}

export function getMintAccessoryInstructionDataDecoder(): Decoder<MintAccessoryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getMintAccessoryInstructionDataCodec(): Codec<
  MintAccessoryInstructionDataArgs,
  MintAccessoryInstructionData
> {
  return combineCodec(
    getMintAccessoryInstructionDataEncoder(),
    getMintAccessoryInstructionDataDecoder()
  );
}

export type MintAccessoryInput<
  TAccountArtist extends string = string,
  TAccountAccessory extends string = string,
  TAccountAccessoryCollection extends string = string,
  TAccountConfig extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  artist: TransactionSigner<TAccountArtist>;
  accessory: TransactionSigner<TAccountAccessory>;
  accessoryCollection: Address<TAccountAccessoryCollection>;
  config: Address<TAccountConfig>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: MintAccessoryInstructionDataArgs['name'];
  uri: MintAccessoryInstructionDataArgs['uri'];
};

export function getMintAccessoryInstruction<
  TAccountArtist extends string,
  TAccountAccessory extends string,
  TAccountAccessoryCollection extends string,
  TAccountConfig extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SHAPELY_PROGRAM_ADDRESS,
>(
  input: MintAccessoryInput<
    TAccountArtist,
    TAccountAccessory,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintAccessoryInstruction<
  TProgramAddress,
  TAccountArtist,
  TAccountAccessory,
  TAccountAccessoryCollection,
  TAccountConfig,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SHAPELY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    artist: { value: input.artist ?? null, isWritable: true },
    accessory: { value: input.accessory ?? null, isWritable: true },
    accessoryCollection: {
      value: input.accessoryCollection ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.artist),
      getAccountMeta(accounts.accessory),
      getAccountMeta(accounts.accessoryCollection),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintAccessoryInstructionDataEncoder().encode(
      args as MintAccessoryInstructionDataArgs
    ),
  } as MintAccessoryInstruction<
    TProgramAddress,
    TAccountArtist,
    TAccountAccessory,
    TAccountAccessoryCollection,
    TAccountConfig,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintAccessoryInstruction<
  TProgram extends string = typeof SHAPELY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    artist: TAccountMetas[0];
    accessory: TAccountMetas[1];
    accessoryCollection: TAccountMetas[2];
    config: TAccountMetas[3];
    mplCoreProgram: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: MintAccessoryInstructionData;
};

export function parseMintAccessoryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintAccessoryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      artist: getNextAccount(),
      accessory: getNextAccount(),
      accessoryCollection: getNextAccount(),
      config: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintAccessoryInstructionDataDecoder().decode(instruction.data),
  };
}
