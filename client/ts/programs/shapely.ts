/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeInstruction,
  type ParsedMintAccessoryInstruction,
} from '../instructions';

export const SHAPELY_PROGRAM_ADDRESS =
  '9PgEiZqE6d9CxAUY7gF9Tn2mXeySnJPnUkMhRAnxwskX' as Address<'9PgEiZqE6d9CxAUY7gF9Tn2mXeySnJPnUkMhRAnxwskX'>;

export enum ShapelyAccount {
  Config,
}

export function identifyShapelyAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ShapelyAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return ShapelyAccount.Config;
  }
  throw new Error(
    'The provided account could not be identified as a shapely account.'
  );
}

export enum ShapelyInstruction {
  Initialize,
  MintAccessory,
}

export function identifyShapelyInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ShapelyInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return ShapelyInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([150, 125, 100, 91, 199, 165, 77, 225])
      ),
      0
    )
  ) {
    return ShapelyInstruction.MintAccessory;
  }
  throw new Error(
    'The provided instruction could not be identified as a shapely instruction.'
  );
}

export type ParsedShapelyInstruction<
  TProgram extends string = '9PgEiZqE6d9CxAUY7gF9Tn2mXeySnJPnUkMhRAnxwskX',
> =
  | ({
      instructionType: ShapelyInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: ShapelyInstruction.MintAccessory;
    } & ParsedMintAccessoryInstruction<TProgram>);
